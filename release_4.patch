Index: src/app/Constructor/Graph/GraphView/index.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/Constructor/Graph/GraphView/index.jsx	(date 1563733675000)
+++ src/app/Constructor/Graph/GraphView/index.jsx	(date 1563905497000)
@@ -17,31 +17,20 @@
 import Background from '../Background';
 import ZoomControls from '../ZoomControls';
 
-import { CURSOR_DEFAULT, CURSOR_CUSTOM_CROSSHAIR, LAYOUT_ENGINE } from '../../config';
+import {
+  CURSOR_DEFAULT, CURSOR_CUSTOM_CROSSHAIR, LAYOUT_ENGINE, ZOOM_CONTROLS_ID,
+} from '../../config';
 
 import * as constructorActions from '../../action';
 
 import GraphUtils from '../utilities/graph-utils';
 import LayoutEngines from '../utilities/layout-engine/layout-engine-config';
 
-import type {
-  Edge as EdgeType,
-} from '../Edge/types';
-import type {
-  IPoint,
-  Node as NodeType,
-} from '../Node/types';
-import type {
-  INodeMapNode,
-  IGraphViewState,
-  IGraphViewProps,
-} from './types';
+import type { Edge as EdgeType } from '../Edge/types';
+import type { IPoint, Node as NodeType } from '../Node/types';
+import type { INodeMapNode, IGraphViewState, IGraphViewProps } from './types';
 
-import {
-  View,
-  ViewWrapper,
-  GraphWrapper,
-} from './styles';
+import { View, ViewWrapper, GraphWrapper } from './styles';
 
 export class GraphView extends React.Component<IGraphViewProps, IGraphViewState> {
   constructor(props: IGraphViewProps) {
@@ -224,7 +213,9 @@
   }
 
   shouldComponentUpdate(nextProps: IGraphViewProps, nextState: IGraphViewState) {
-    const { sourceNode, isLinkingStarted, isResizingStarted } = this.state;
+    const {
+      sourceNode, isLinkingStarted, isResizingStarted, focused,
+    } = this.state;
     const {
       nodes, edges, selected, readOnly, layoutEngineType, cursor,
     } = this.props;
@@ -238,6 +229,7 @@
       || nextState.isLinkingStarted !== isLinkingStarted
       || nextState.isResizingStarted !== isResizingStarted
       || nextState.sourceNode !== sourceNode
+      || nextState.focused !== focused
       || nextProps.cursor !== cursor
     ) {
       return true;
@@ -256,6 +248,7 @@
       selectedEdgeObj,
       componentUpToDate,
       sourceNode,
+      focused,
       isLinkingStarted,
       isResizingStarted,
     } = this.state;
@@ -299,7 +292,8 @@
       || !componentUpToDate
       || sourceNode !== prevState.sourceNode
       || isLinkingStarted !== prevState.isLinkingStarted
-      || isResizingStarted !== prevState.isResizingStarted;
+      || isResizingStarted !== prevState.isResizingStarted
+      || focused !== prevState.focused;
     const isMapItemsCountChanged = propsEdges.length !== prevProps.edges.length
       || propsNodes.length !== prevProps.nodes.length;
 
@@ -687,10 +681,10 @@
 
   handleDocumentClick = (e: MouseEvent) => {
     // Ignore document click if it's in the SVGElement
-    if (e
-      && e.target
-      && e.target.ownerSVGElement != null
-      && e.target.ownerSVGElement === this.graphSvg.current) {
+    const { selected: isItemSelected } = this.props;
+    const isTargetEqualsToViewport = e && e.target && this.graphSvg.current.contains(e.target);
+
+    if (isItemSelected || isTargetEqualsToViewport) {
       return;
     }
 
@@ -1308,7 +1302,8 @@
    */
   renderGraphControls() {
     const { viewTransform } = this.state;
-    const { minZoom, maxZoom, zoomControlsRef } = this.props;
+    const { minZoom, maxZoom } = this.props;
+    const zoomControlsRef = document.querySelector(`#${ZOOM_CONTROLS_ID}`);
 
     if (zoomControlsRef) {
       ReactDOM.render(
@@ -1376,7 +1371,6 @@
 }
 
 const mapStateToProps = ({ constructor, defaults }) => ({
-  zoomControlsRef: constructor.zoom.zoomControlsRef,
   cursor: constructor.cursor,
   edgeDefaults: defaults.edgeBody,
 });
Index: src/app/Constructor/Graph/GraphView/types.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/Constructor/Graph/GraphView/types.js	(date 1563733675000)
+++ src/app/Constructor/Graph/GraphView/types.js	(date 1563869518000)
@@ -83,7 +83,6 @@
     edgeContainer: any,
     isEdgeSelected: boolean,
   ) => void,
-  zoomControlsRef: HTMLDivElement | null,
   ACTION_SET_CURSOR: Function,
   edgeDefaults: DefaultEdgeType,
 };
Index: src/app/Constructor/Toolbars/index.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/Constructor/Toolbars/index.jsx	(date 1563733675000)
+++ src/app/Constructor/Toolbars/index.jsx	(date 1563869518000)
@@ -10,7 +10,7 @@
 
 import type { IToolbarsProps, IToolbarsState } from './types';
 
-import { CONFIRMATION_MODALS } from '../config';
+import { ZOOM_CONTROLS_ID, CONFIRMATION_MODALS } from '../config';
 import { MODALS_NAMES } from '../../Modals/config';
 
 import addNewIcon from '../../../shared/assets/icons/toolbar/templates/toolbar-addnew.png';
@@ -89,13 +89,6 @@
         ],
       },
     };
-
-    this.zoomControlsRef = React.createRef();
-  }
-
-  componentDidMount() {
-    const { ACTION_SET_ZOOM_CONTROLS_REF } = this.props;
-    ACTION_SET_ZOOM_CONTROLS_REF(this.zoomControlsRef.current);
   }
 
   toggleShowSOPickerModal = () => {
@@ -124,8 +117,6 @@
     ACTION_REDO_MAP();
   }
 
-  zoomControlsRef: { current: null | HTMLDivElement };
-
   render() {
     const { expand, toolbars, right } = this.state;
     const { isUndoAvailable, isRedoAvailable, classes } = this.props;
@@ -149,7 +140,7 @@
             <LabTitleItem>
               <MapTitle />
             </LabTitleItem>
-            <div ref={this.zoomControlsRef} />
+            <div id={ZOOM_CONTROLS_ID} />
             <ToolbarGroup group={right} />
           </Block>
         </AppBar>
@@ -167,9 +158,6 @@
   ACTION_TOGGLE_FULLSCREEN: () => {
     dispatch(constructorActions.ACTION_TOGGLE_FULLSCREEN());
   },
-  ACTION_SET_ZOOM_CONTROLS_REF: (ref: null | HTMLDivElement) => {
-    dispatch(constructorActions.ACTION_SET_ZOOM_CONTROLS_REF(ref));
-  },
   ACTION_UNDO_MAP: () => {
     dispatch(mapActions.ACTION_UNDO_MAP());
   },
Index: src/app/Constructor/Toolbars/types.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/Constructor/Toolbars/types.js	(date 1563733675000)
+++ src/app/Constructor/Toolbars/types.js	(date 1563869518000)
@@ -24,7 +24,6 @@
   ACTION_UNDO_MAP: Function,
   ACTION_REDO_MAP: Function,
   ACTION_TOGGLE_FULLSCREEN: Function,
-  ACTION_SET_ZOOM_CONTROLS_REF: Function,
   ACTION_TOGGLE_MODAL: Function,
 };
 
Index: src/app/Constructor/action.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/Constructor/action.js	(date 1563733675000)
+++ src/app/Constructor/action.js	(date 1563869518000)
@@ -1,16 +1,8 @@
 // @flow
 import {
-  SET_CURSOR,
-  SET_FULLSCREEN,
-  TOGGLE_FULLSCREEN,
-  SET_ZOOM_CONTROLS_REF,
+  SET_CURSOR, SET_FULLSCREEN, TOGGLE_FULLSCREEN,
 } from './types';
 
-export const ACTION_SET_ZOOM_CONTROLS_REF = (ref: null | HTMLDivElement) => ({
-  type: SET_ZOOM_CONTROLS_REF,
-  ref,
-});
-
 export const ACTION_SET_CURSOR = (cursor: string) => ({
   type: SET_CURSOR,
   cursor,
Index: src/app/Constructor/config.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/Constructor/config.js	(date 1563733675000)
+++ src/app/Constructor/config.js	(date 1563869518000)
@@ -2,6 +2,8 @@
 export const CURSOR_CROSSHAIR = 'crosshair';
 export const CURSOR_CUSTOM_CROSSHAIR = 'customCrosshair';
 
+export const ZOOM_CONTROLS_ID = 'zoom_controls';
+
 export const CONFIRMATION_MODALS = {
   CREATE_TEMPLATE: 'CreateTemplate',
   PRE_BUILT_TEMPLATES: 'PreBuiltTemplates',
Index: src/app/Constructor/reducer.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/Constructor/reducer.js	(date 1563733675000)
+++ src/app/Constructor/reducer.js	(date 1563869518000)
@@ -5,7 +5,6 @@
   SET_CURSOR,
   SET_FULLSCREEN,
   TOGGLE_FULLSCREEN,
-  SET_ZOOM_CONTROLS_REF,
 } from './types';
 
 import { LAYOUT_ENGINE } from './config';
@@ -18,7 +17,6 @@
     zoomStep: 1,
     maxZoom: 150,
     minZoom: 15,
-    zoomControlsRef: null,
   },
   autoSave: {
     isEnabled: false,
@@ -32,18 +30,6 @@
   action: ConstructorActions,
 ) => {
   switch (action.type) {
-    case SET_ZOOM_CONTROLS_REF: {
-      const { zoom, ...restState } = state;
-      const { ref: zoomControlsRef } = action;
-
-      return {
-        ...restState,
-        zoom: {
-          ...zoom,
-          zoomControlsRef,
-        },
-      };
-    }
     case SET_CURSOR: {
       const { cursor } = action;
 
Index: src/app/Constructor/types.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/Constructor/types.js	(date 1563733675000)
+++ src/app/Constructor/types.js	(date 1563869518000)
@@ -33,7 +33,6 @@
     zoomStep: number,
     maxZoom: number,
     minZoom: number,
-    zoomControlsRef: HTMLDivElement | null,
   },
   autoSave: {
     isEnabled: boolean,
@@ -42,12 +41,6 @@
   isFullScreen: boolean,
 };
 
-const SET_ZOOM_CONTROLS_REF = 'SET_ZOOM_CONTROLS_REF';
-type SetZoomControlsRef = {
-  type: 'SET_ZOOM_CONTROLS_REF',
-  ref: null | HTMLDivElement,
-};
-
 const SET_CURSOR = 'SET_CURSOR';
 type SetCursor = {
   type: 'SET_CURSOR',
@@ -65,12 +58,11 @@
   type: 'TOGGLE_FULLSCREEN',
 };
 
-export type ConstructorActions = SetZoomControlsRef |
-  SetFullscreen | ToggleFullscreen | SetCursor;
+export type ConstructorActions = SetFullscreen |
+  ToggleFullscreen | SetCursor;
 
 export {
   SET_CURSOR,
   SET_FULLSCREEN,
   TOGGLE_FULLSCREEN,
-  SET_ZOOM_CONTROLS_REF,
 };
Index: src/app/Header/NavigationBar/index.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/Header/NavigationBar/index.jsx	(date 1563869518000)
+++ src/app/Header/NavigationBar/index.jsx	(date 1563458631000)
@@ -7,6 +7,8 @@
 
 import type { INavigationProps, INavigationState } from './types';
 
+import { SCOPED_OBJECTS } from '../../config';
+
 import styles from './styles';
 
 class NavigationBar extends PureComponent<INavigationProps, INavigationState> {
@@ -47,14 +49,17 @@
           onClose={this.handleClose}
           className={classes.menu}
         >
-          <MenuItem
-            onClick={this.handleClose}
-            className={classes.menuItem}
-            component={Link}
-            to="/scopedObject/constant"
-          >
-            Constants
-          </MenuItem>
+          {Object.values(SCOPED_OBJECTS).map(SOName => (
+            <MenuItem
+              key={SOName}
+              onClick={this.handleClose}
+              className={classes.menuItem}
+              component={Link}
+              to={`/scopedObject/${SOName.toLowerCase()}`}
+            >
+              {`${SOName}s`}
+            </MenuItem>
+          ))}
         </Menu>
       </div>
     );
Index: src/app/SOEditor/Constants/index.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/SOEditor/Constants/index.jsx	(date 1563869518000)
+++ src/app/SOEditor/Constants/index.jsx	(date 1563870438000)
@@ -1,40 +1,24 @@
 // @flow
-import React, { PureComponent } from 'react';
-import { withRouter } from 'react-router-dom';
-import { connect } from 'react-redux';
-import { withStyles } from '@material-ui/core/styles';
+import React from 'react';
 import { TextField, Chip } from '@material-ui/core';
 
+import ScopedObjectService, { withSORedux } from '../index.service';
+
 import OutlinedInput from '../../../shared/components/OutlinedInput';
 import OutlinedSelect from '../../../shared/components/OutlinedSelect';
 import EditorWrapper from '../../../shared/components/EditorWrapper';
 import SearchModal from '../../../shared/components/SearchModal';
 
-import type { IConstantsProps, IConstantsState, Icons } from './types';
-import type { ScopeLevel as ScopeLevelType } from '../../reducers/scopeLevels/types';
-import type { ScopedObjectBase as ScopedObjectBaseType } from '../../reducers/scopedObjects/types';
+import type { IScopedObjectProps } from '../types';
 
 import { EDITORS_FIELDS } from '../config';
 import { SCOPE_LEVELS, SCOPED_OBJECTS } from '../../config';
-import { getIconsByScopeLevel } from './utils';
-import { toLowerCaseAndPlural } from '../utils';
-
-import * as scopedObjectsActions from '../../reducers/scopedObjects/action';
-import * as scopeLevelsActions from '../../reducers/scopeLevels/action';
 
-import styles, { FieldLabel } from './styles';
+import { FieldLabel } from '../styles';
 
-class Constants extends PureComponent<IConstantsProps, IConstantsState> {
-  parentIdRef: HTMLElement | null;
-
-  isEditMode: boolean = false;
-
-  scopeLevelObj: ScopeLevelType | null;
-
-  icons: Icons;
-
-  constructor(props: IConstantsProps) {
-    super(props);
+class Constant extends ScopedObjectService {
+  constructor(props: IScopedObjectProps) {
+    super(props, SCOPED_OBJECTS.CONSTANT);
     this.state = {
       name: '',
       description: '',
@@ -43,135 +27,6 @@
       isShowModal: false,
       isFieldsDisabled: false,
     };
-
-    this.checkIfEditMode();
-    this.icons = getIconsByScopeLevel(SCOPE_LEVELS[0]);
-  }
-
-  componentDidUpdate(prevProps: IConstantsProps, prevState: IConstantsState) {
-    const { scopeLevel, isShowModal } = this.state;
-    const { scopeLevel: scopeLevelPrev, isShowModal: isShowModalPrev } = prevState;
-    const {
-      history,
-      constants,
-      isConstantCreating,
-      isConstantUpdating,
-      match: { params: { constantId } },
-    } = this.props;
-    const {
-      constants: constantsPrev,
-      isConstantCreating: isConstantCreatingPrev,
-      isConstantUpdating: isConstantUpdatingPrev,
-    } = prevProps;
-
-    const isScopeLevelChanged = scopeLevel !== scopeLevelPrev;
-    const isCreatingStarted = !isConstantCreatingPrev && isConstantCreating;
-    const isCreatingEnded = isConstantCreatingPrev && !isConstantCreating;
-    const isUpdatingStarted = !isConstantUpdatingPrev && isConstantUpdating;
-    const isUpdatingEnded = isConstantUpdatingPrev && !isConstantUpdating;
-    const isConstantCreated = constantsPrev.length < constants.length;
-    const isModalClosed = isShowModalPrev && !isShowModal;
-    const isConstantsUpdated = constantsPrev !== constants;
-
-    if (isCreatingStarted || isUpdatingStarted) {
-      this.toggleDisableFields();
-    }
-
-    if (isModalClosed) {
-      this.blurParentInput();
-    }
-
-    if (isCreatingEnded || isUpdatingEnded) {
-      if (isConstantCreated) {
-        history.push(`/scopedObject/${SCOPED_OBJECTS.CONSTANT.toLowerCase()}`);
-      } else {
-        this.toggleDisableFields();
-      }
-    }
-
-    if (isScopeLevelChanged) {
-      this.icons = getIconsByScopeLevel(scopeLevel);
-      this.handleParentRemove();
-    }
-
-    if (isConstantsUpdated && constantId) {
-      const constant = constants.find(({ id }) => id === Number(constantId));
-
-      // eslint-disable-next-line react/no-did-update-set-state
-      this.setState({ ...constant });
-    }
-  }
-
-  checkIfEditMode = (): void => {
-    const {
-      match: { params: { constantId } }, ACTION_CONSTANT_DETAILS_REQUESTED,
-    } = this.props;
-
-    if (constantId) {
-      ACTION_CONSTANT_DETAILS_REQUESTED(Number(constantId));
-
-      this.isEditMode = true;
-    }
-  }
-
-  handleInputChange = (e: Event): void => {
-    const { value, name } = (e.target: window.HTMLInputElement);
-    this.setState({ [name]: value });
-  }
-
-  handleSubmitScopedObject = (): void => {
-    const scopedObjectData = { ...this.state };
-    const {
-      match: { params: { constantId } },
-      ACTION_CONSTANT_CREATE_REQUESTED,
-      ACTION_CONSTANT_UPDATE_REQUESTED,
-    } = this.props;
-
-    if (this.isEditMode) {
-      ACTION_CONSTANT_UPDATE_REQUESTED(Number(constantId), scopedObjectData);
-    } else {
-      const { id: parentId } = this.scopeLevelObj;
-      Object.assign(scopedObjectData, { parentId });
-
-      ACTION_CONSTANT_CREATE_REQUESTED(scopedObjectData);
-    }
-  }
-
-  toggleDisableFields = (): void => {
-    this.setState(({ isFieldsDisabled }) => ({
-      isFieldsDisabled: !isFieldsDisabled,
-    }));
-  }
-
-  showModal = (): void => {
-    const { scopeLevel } = this.state;
-    const { ACTION_SCOPE_LEVELS_REQUESTED } = this.props;
-
-    ACTION_SCOPE_LEVELS_REQUESTED(scopeLevel.toLowerCase());
-
-    this.setState({ isShowModal: true });
-  }
-
-  hideModal = (): void => {
-    this.setState({ isShowModal: false });
-  }
-
-  handleLevelObjChoose = (level: ScopeLevelType): void => {
-    this.scopeLevelObj = level;
-    this.setState({ isShowModal: false });
-  }
-
-  blurParentInput = (): void => {
-    this.parentIdRef.blur();
-  }
-
-  setParentRef = (ref: HTMLElement): void => {
-    this.parentIdRef = ref;
-  }
-
-  handleParentRemove = (): void => {
-    this.scopeLevelObj = null;
-    this.forceUpdate();
   }
 
   render() {
@@ -184,7 +39,8 @@
     return (
       <EditorWrapper
         isEditMode={this.isEditMode}
-        scopedObject={SCOPED_OBJECTS.CONSTANT}
+        isDisabled={isFieldsDisabled}
+        scopedObject={this.scopedObjectType}
         onSubmit={this.handleSubmitScopedObject}
       >
         <FieldLabel>
@@ -285,46 +141,4 @@
   }
 }
 
-const mapStateToProps = ({ scopedObjects, scopeLevels }) => ({
-  constants: scopedObjects[toLowerCaseAndPlural(SCOPED_OBJECTS.CONSTANT)],
-  isConstantCreating: scopedObjects.isCreating,
-  isConstantUpdating: scopedObjects.isUpdating,
-  scopeLevels,
-});
-
-const mapDispatchToProps = dispatch => ({
-  ACTION_SCOPE_LEVELS_REQUESTED: (scopeLevel: string) => {
-    dispatch(scopeLevelsActions.ACTION_SCOPE_LEVELS_REQUESTED(scopeLevel));
-  },
-  ACTION_CONSTANT_DETAILS_REQUESTED: (scopedObjectId: number) => {
-    dispatch(scopedObjectsActions.ACTION_SCOPED_OBJECT_DETAILS_REQUESTED(
-      scopedObjectId,
-      toLowerCaseAndPlural(SCOPED_OBJECTS.CONSTANT),
-    ));
-  },
-  ACTION_CONSTANT_CREATE_REQUESTED: (scopedObjectData: ScopedObjectBaseType) => {
-    dispatch(scopedObjectsActions.ACTION_SCOPED_OBJECT_CREATE_REQUESTED(
-      toLowerCaseAndPlural(SCOPED_OBJECTS.CONSTANT),
-      scopedObjectData,
-    ));
-  },
-  ACTION_CONSTANT_UPDATE_REQUESTED: (
-    scopedObjectId: number,
-    scopedObjectData: ScopedObjectBaseType,
-  ) => {
-    dispatch(scopedObjectsActions.ACTION_SCOPED_OBJECT_UPDATE_REQUESTED(
-      scopedObjectId,
-      toLowerCaseAndPlural(SCOPED_OBJECTS.CONSTANT),
-      scopedObjectData,
-    ));
-  },
-});
-
-export default connect(
-  mapStateToProps,
-  mapDispatchToProps,
-)(
-  withStyles(styles)(
-    withRouter(Constants),
-  ),
-);
+export default withSORedux(Constant, SCOPED_OBJECTS.CONSTANT);
Index: src/app/SOEditor/Counters/config.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/SOEditor/Counters/config.js	(date 1563458631000)
+++ src/app/SOEditor/Counters/config.js	(date 1563458631000)
@@ -0,0 +1,3 @@
+export const VISIBILITY = ['Show', 'Don\'t show', 'Custom'];
+
+export const COUNTER_STATUSES = ['Regular', 'Main'];
Index: src/app/SOEditor/Counters/index.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/SOEditor/Counters/index.jsx	(date 1563870438000)
+++ src/app/SOEditor/Counters/index.jsx	(date 1563870438000)
@@ -0,0 +1,194 @@
+// @flow
+import React from 'react';
+import { TextField, Chip } from '@material-ui/core';
+
+import ScopedObjectService, { withSORedux } from '../index.service';
+
+import OutlinedInput from '../../../shared/components/OutlinedInput';
+import OutlinedSelect from '../../../shared/components/OutlinedSelect';
+import EditorWrapper from '../../../shared/components/EditorWrapper';
+import SearchModal from '../../../shared/components/SearchModal';
+
+import type { IScopedObjectProps } from '../types';
+
+import { VISIBILITY, COUNTER_STATUSES } from './config';
+import { EDITORS_FIELDS } from '../config';
+import { SCOPE_LEVELS, SCOPED_OBJECTS } from '../../config';
+
+import { FieldLabel } from '../styles';
+
+class Counters extends ScopedObjectService {
+  constructor(props: IScopedObjectProps) {
+    super(props, SCOPED_OBJECTS.COUNTER);
+    this.state = {
+      name: '',
+      description: '',
+      scopeLevel: SCOPE_LEVELS[0],
+      visible: 0,
+      status: 0,
+      startValue: '',
+      isShowModal: false,
+      isFieldsDisabled: false,
+    };
+  }
+
+  handleSelectChoose = (e: Event): void => {
+    const { value, name } = (e.target: window.HTMLInputElement);
+
+    let valuesList;
+
+    switch (name) {
+      case 'status':
+        valuesList = COUNTER_STATUSES;
+        break;
+      case 'visible':
+        valuesList = VISIBILITY;
+        break;
+      default: break;
+    }
+
+    const valueNumbered = valuesList.findIndex(item => item === value);
+
+    this.setState({ [name]: valueNumbered });
+  }
+
+  render() {
+    const {
+      name,
+      description,
+      scopeLevel,
+      startValue,
+      status,
+      visible,
+      isShowModal,
+      isFieldsDisabled,
+    } = this.state;
+    const { classes, scopeLevels } = this.props;
+    const { iconEven: IconEven, iconOdd: IconOdd } = this.icons;
+
+    return (
+      <EditorWrapper
+        isEditMode={this.isEditMode}
+        isDisabled={isFieldsDisabled}
+        scopedObject={this.scopedObjectType}
+        onSubmit={this.handleSubmitScopedObject}
+      >
+        <FieldLabel>
+          {EDITORS_FIELDS.NAME}
+          <OutlinedInput
+            name="name"
+            placeholder={EDITORS_FIELDS.NAME}
+            value={name}
+            onChange={this.handleInputChange}
+            disabled={isFieldsDisabled}
+            fullWidth
+          />
+        </FieldLabel>
+        <FieldLabel>
+          {EDITORS_FIELDS.DESCRIPTION}
+          <TextField
+            multiline
+            rows="3"
+            name="description"
+            placeholder={EDITORS_FIELDS.DESCRIPTION}
+            className={classes.textField}
+            margin="normal"
+            variant="outlined"
+            value={description}
+            onChange={this.handleInputChange}
+            disabled={isFieldsDisabled}
+            fullWidth
+          />
+        </FieldLabel>
+        <FieldLabel>
+          {EDITORS_FIELDS.STARTING_VALUE}
+          <TextField
+            multiline
+            rows="1"
+            name="startValue"
+            placeholder={EDITORS_FIELDS.STARTING_VALUE}
+            className={classes.textField}
+            margin="normal"
+            variant="outlined"
+            value={startValue}
+            onChange={this.handleInputChange}
+            disabled={isFieldsDisabled}
+            fullWidth
+          />
+        </FieldLabel>
+        <FieldLabel>
+          {EDITORS_FIELDS.SCOPED_OBJECT_STATUS}
+        </FieldLabel>
+        <OutlinedSelect
+          name="status"
+          value={COUNTER_STATUSES[status]}
+          values={COUNTER_STATUSES}
+          onChange={this.handleSelectChoose}
+          disabled={isFieldsDisabled}
+        />
+        <FieldLabel>
+          {EDITORS_FIELDS.VISIBLE}
+        </FieldLabel>
+        <OutlinedSelect
+          name="visible"
+          value={VISIBILITY[visible]}
+          values={VISIBILITY}
+          onChange={this.handleSelectChoose}
+          disabled={isFieldsDisabled}
+        />
+        {!this.isEditMode && (
+          <>
+            <FieldLabel>
+              {EDITORS_FIELDS.SCOPE_LEVEL}
+            </FieldLabel>
+            <OutlinedSelect
+              name="scopeLevel"
+              value={scopeLevel}
+              values={SCOPE_LEVELS}
+              onChange={this.handleInputChange}
+              disabled={isFieldsDisabled}
+            />
+            <FieldLabel>
+              {EDITORS_FIELDS.PARENT}
+              <OutlinedInput
+                name="parentId"
+                placeholder={this.scopeLevelObj ? '' : EDITORS_FIELDS.PARENT}
+                disabled={isFieldsDisabled}
+                onFocus={this.showModal}
+                setRef={this.setParentRef}
+                readOnly
+                fullWidth
+              />
+              {this.scopeLevelObj && (
+                <Chip
+                  className={classes.chip}
+                  label={this.scopeLevelObj.name}
+                  variant="outlined"
+                  color="primary"
+                  onDelete={this.handleParentRemove}
+                  icon={<IconEven />}
+                />
+              )}
+            </FieldLabel>
+          </>
+        )}
+
+        {isShowModal && (
+          <SearchModal
+            label="Parent record"
+            searchLabel="Search for parent record"
+            items={scopeLevels[scopeLevel.toLowerCase()]}
+            text={`Please choose appropriate parent from ${scopeLevel}:`}
+            onClose={this.hideModal}
+            onItemChoose={this.handleLevelObjChoose}
+            isItemsFetching={scopeLevels.isFetching}
+            iconEven={IconEven}
+            iconOdd={IconOdd}
+          />
+        )}
+      </EditorWrapper>
+    );
+  }
+}
+
+export default withSORedux(Counters, SCOPED_OBJECTS.COUNTER);
Index: src/app/SOEditor/SOList/index.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/SOEditor/SOList/index.jsx	(date 1563869518000)
+++ src/app/SOEditor/SOList/index.jsx	(date 1563870438000)
@@ -15,8 +15,7 @@
 import * as scopedObjectsActions from '../../reducers/scopedObjects/action';
 
 import filterByName from '../../../helpers/filterByName';
-import { toLowerCaseAndPlural } from '../utils';
-import { sortByIdDesc } from './utils';
+import { toLowerCaseAndPlural, toUpperCaseAndPlural } from '../utils';
 
 import styles, {
   HeaderWrapper, ProgressWrapper, ListWithSearchWrapper,
@@ -25,12 +24,14 @@
 class SOList extends PureComponent<ISOListProps, ISOListState> {
   listWithSearchRef: null | React.RefObject<any>;
 
-  scopedObjectTypePluralled: string;
+  SOTypeLowerCasedAndPluralled: string;
+
+  SOTypeUpperCasedAndPluralled: string;
 
   constructor(props: ISOListProps) {
     super(props);
     this.state = {
-      scopedObjectsFiltered: sortByIdDesc(props.scopedObjects),
+      scopedObjectsFiltered: props.scopedObjects,
     };
 
     this.listWithSearchRef = React.createRef();
@@ -40,16 +41,33 @@
       ACTION_SCOPED_OBJECTS_TYPED_REQUESTED,
     } = props;
 
-    this.scopedObjectTypePluralled = toLowerCaseAndPlural(scopedObjectType);
-    ACTION_SCOPED_OBJECTS_TYPED_REQUESTED(this.scopedObjectTypePluralled);
+    this.SOTypeLowerCasedAndPluralled = toLowerCaseAndPlural(scopedObjectType);
+    this.SOTypeUpperCasedAndPluralled = toUpperCaseAndPlural(scopedObjectType);
+    ACTION_SCOPED_OBJECTS_TYPED_REQUESTED(this.SOTypeLowerCasedAndPluralled);
   }
 
   componentDidUpdate(prevProps: ISOListProps) {
-    const { scopedObjects } = this.props;
+    const {
+      scopedObjects,
+      match: { params: { scopedObjectType } },
+      ACTION_SCOPED_OBJECTS_TYPED_REQUESTED,
+    } = this.props;
+    const {
+      scopedObjects: scopedObjectsPrev,
+      match: { params: { scopedObjectType: scopedObjectTypePrev } },
+    } = prevProps;
+
     const { query } = this.listWithSearchRef.state;
 
-    if (scopedObjects !== prevProps.scopedObjects) {
-      const scopedObjectsFiltered = sortByIdDesc(filterByName(scopedObjects, query));
+    if (scopedObjectType !== scopedObjectTypePrev) {
+      this.SOTypeLowerCasedAndPluralled = toLowerCaseAndPlural(scopedObjectType);
+      this.SOTypeUpperCasedAndPluralled = toUpperCaseAndPlural(scopedObjectType);
+
+      ACTION_SCOPED_OBJECTS_TYPED_REQUESTED(this.SOTypeLowerCasedAndPluralled);
+    }
+
+    if (scopedObjects !== scopedObjectsPrev) {
+      const scopedObjectsFiltered = filterByName(scopedObjects, query);
 
       // eslint-disable-next-line react/no-did-update-set-state
       this.setState({ scopedObjectsFiltered });
@@ -58,14 +76,14 @@
 
   handleItemsSearch = (query: string): void => {
     const { scopedObjects } = this.props;
-    const scopedObjectsFiltered = sortByIdDesc(filterByName(scopedObjects, query));
+    const scopedObjectsFiltered = filterByName(scopedObjects, query);
 
     this.setState({ scopedObjectsFiltered });
   }
 
   clearSearchInput = (): void => {
     const { scopedObjects } = this.props;
-    const scopedObjectsFiltered = sortByIdDesc(scopedObjects);
+    const scopedObjectsFiltered = scopedObjects;
 
     this.setState({ scopedObjectsFiltered });
   }
@@ -83,7 +101,7 @@
     const { ACTION_SCOPED_OBJECT_DELETE_REQUESTED } = this.props;
     ACTION_SCOPED_OBJECT_DELETE_REQUESTED(
       scopedObjectId,
-      this.scopedObjectTypePluralled,
+      this.SOTypeLowerCasedAndPluralled,
     );
   }
 
@@ -105,7 +123,7 @@
         <Grid item xs={12} sm={11} md={11} component={Paper} className={classes.rightPanel}>
           <HeaderWrapper>
             <Typography variant="h4" className={classes.title}>
-              {this.scopedObjectTypePluralled}
+              {this.SOTypeUpperCasedAndPluralled}
             </Typography>
             <Button
               color="primary"
Index: src/app/SOEditor/config.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/SOEditor/config.js	(date 1563869518000)
+++ src/app/SOEditor/config.js	(date 1563870438000)
@@ -1,11 +1,31 @@
+import { SCOPED_OBJECTS } from '../config';
+
+import Constants from './Constants';
+import Counters from './Counters';
+import Questions from './Questions';
+
 export const EDITORS_FIELDS = {
   NAME: 'Name',
   DESCRIPTION: 'Description',
   TEXT: 'Text',
   SCOPE_LEVEL: 'Scope Level',
   PARENT: 'Parent',
+  STARTING_VALUE: 'Starting value (optional)',
+  VISIBLE: 'Visible',
+  COUNTER_STATUS: 'Counter status',
+  STEM: 'Stem',
+  QUESTION_TYPES: 'Question Types',
+  WIDTH: 'Width',
+  HEIGHT: 'Height',
+  PLACEHOLDER: 'Placeholder',
+  LAYOUT_TYPE: 'Layout Type',
+  FEEDBACK: 'Feedback',
+  SHOW_ANSWER: 'Show Answer',
+  SHOW_SUBMIT: 'Show Submit',
 };
 
-export default {
-  EDITORS_FIELDS,
+export const SCOPED_OBJECTS_MAPPING = {
+  [SCOPED_OBJECTS.CONSTANT.toLowerCase()]: Constants,
+  [SCOPED_OBJECTS.COUNTER.toLowerCase()]: Counters,
+  [SCOPED_OBJECTS.QUESTION.toLowerCase()]: Questions,
 };
Index: src/app/SOEditor/index.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/SOEditor/index.jsx	(date 1563869518000)
+++ src/app/SOEditor/index.jsx	(date 1563458631000)
@@ -3,9 +3,10 @@
 import { connect } from 'react-redux';
 import { Route, Switch } from 'react-router-dom';
 
-import Constants from './Constants';
 import SOList from './SOList';
 
+import { SCOPED_OBJECTS_MAPPING } from './config';
+
 import * as scopeLevelsActions from '../reducers/scopeLevels/action';
 import * as scopedObjectsActions from '../reducers/scopedObjects/action';
 
@@ -30,11 +31,17 @@
           path="/scopedObject/:scopedObjectType"
           component={SOList}
         />
-        <Route
-          exact
-          path={['/scopedObject/constant/add', '/scopedObject/constant/:constantId']}
-          component={Constants}
-        />
+        {Object.keys(SCOPED_OBJECTS_MAPPING).map(scopedObjectType => (
+          <Route
+            key={scopedObjectType}
+            exact
+            path={[
+              `/scopedObject/${scopedObjectType}/add`,
+              `/scopedObject/${scopedObjectType}/:scopedObjectId`,
+            ]}
+            component={SCOPED_OBJECTS_MAPPING[scopedObjectType]}
+          />
+        ))}
       </Switch>
     );
   }
Index: src/app/SOEditor/index.service.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/SOEditor/index.service.js	(date 1563870438000)
+++ src/app/SOEditor/index.service.js	(date 1563870438000)
@@ -0,0 +1,218 @@
+// @flow
+import { PureComponent } from 'react';
+import { withRouter } from 'react-router-dom';
+import { connect } from 'react-redux';
+import { withStyles } from '@material-ui/core/styles';
+
+import type { IScopedObjectProps, IScopedObjectState, Icons } from './types';
+import type { ScopeLevel as ScopeLevelType } from '../reducers/scopeLevels/types';
+import type { ScopedObjectBase as ScopedObjectBaseType } from '../reducers/scopedObjects/types';
+
+import { SCOPE_LEVELS } from '../config';
+import { getIconsByScopeLevel, toLowerCaseAndPlural } from './utils';
+
+import * as scopedObjectsActions from '../reducers/scopedObjects/action';
+import * as scopeLevelsActions from '../reducers/scopeLevels/action';
+
+import styles from './styles';
+
+class ScopedObjectService extends PureComponent<IScopedObjectProps, IScopedObjectState> {
+  parentIdRef: HTMLElement | null;
+
+  isEditMode: boolean = false;
+
+  scopeLevelObj: ScopeLevelType | null;
+
+  icons: Icons;
+
+  scopedObjectType: string;
+
+  constructor(props: IScopedObjectProps, scopedObjectType: string) {
+    super(props);
+
+    this.checkIfEditMode();
+    this.scopedObjectType = scopedObjectType;
+    this.icons = getIconsByScopeLevel(SCOPE_LEVELS[0]);
+  }
+
+  componentDidUpdate(prevProps: IScopedObjectProps, prevState: IScopedObjectState) {
+    const { scopeLevel, isShowModal } = this.state;
+    const { scopeLevel: scopeLevelPrev, isShowModal: isShowModalPrev } = prevState;
+    const {
+      history,
+      scopedObjects,
+      isScopedObjectCreating,
+      isScopedObjectUpdating,
+      match: { params: { scopedObjectId } },
+    } = this.props;
+    const {
+      scopedObjects: scopedObjectsPrev,
+      isScopedObjectCreating: isScopedObjectCreatingPrev,
+      isScopedObjectUpdating: isScopedObjectUpdatingPrev,
+    } = prevProps;
+
+    const isScopeLevelChanged = scopeLevel !== scopeLevelPrev;
+    const isCreatingStarted = !isScopedObjectCreatingPrev && isScopedObjectCreating;
+    const isCreatingEnded = isScopedObjectCreatingPrev && !isScopedObjectCreating;
+    const isUpdatingStarted = !isScopedObjectUpdatingPrev && isScopedObjectUpdating;
+    const isUpdatingEnded = isScopedObjectUpdatingPrev && !isScopedObjectUpdating;
+    const isScopedObjectCreated = scopedObjectsPrev.length < scopedObjects.length;
+    const isModalClosed = isShowModalPrev && !isShowModal;
+    const isScopedObjectsUpdated = scopedObjectsPrev !== scopedObjects;
+
+    if (isCreatingStarted || isUpdatingStarted) {
+      this.toggleDisableFields();
+    }
+
+    if (isModalClosed) {
+      this.blurParentInput();
+    }
+
+    if (isCreatingEnded || isUpdatingEnded) {
+      if (isScopedObjectCreated) {
+        history.push(`/scopedObject/${this.scopedObjectType.toLowerCase()}`);
+      } else {
+        this.toggleDisableFields();
+      }
+    }
+
+    if (isScopeLevelChanged) {
+      this.icons = getIconsByScopeLevel(scopeLevel);
+      this.handleParentRemove();
+    }
+
+    if (isScopedObjectsUpdated && scopedObjectId) {
+      const scopedObject = scopedObjects.find(({ id }) => id === Number(scopedObjectId));
+
+      // eslint-disable-next-line react/no-did-update-set-state
+      this.setState({ ...scopedObject });
+    }
+  }
+
+  handleInputChange = (e: Event): void => {
+    const { value, name } = (e.target: window.HTMLInputElement);
+    this.setState({ [name]: value });
+  }
+
+  toggleDisableFields = (): void => {
+    this.setState(({ isFieldsDisabled }) => ({
+      isFieldsDisabled: !isFieldsDisabled,
+    }));
+  }
+
+  checkIfEditMode = (): void => {
+    const {
+      match: { params: { scopedObjectId } }, ACTION_SCOPED_OBJECT_DETAILS_REQUESTED,
+    } = this.props;
+
+    if (scopedObjectId) {
+      ACTION_SCOPED_OBJECT_DETAILS_REQUESTED(Number(scopedObjectId));
+
+      this.isEditMode = true;
+    }
+  }
+
+  handleSubmitScopedObject = (): void => {
+    const {
+      isFieldsDisabled,
+      isShowModal,
+      ...scopedObjectData
+    } = this.state;
+    const {
+      match: { params: { scopedObjectId } },
+      ACTION_SCOPED_OBJECT_CREATE_REQUESTED,
+      ACTION_SCOPED_OBJECT_UPDATE_REQUESTED,
+    } = this.props;
+
+    if (this.isEditMode) {
+      ACTION_SCOPED_OBJECT_UPDATE_REQUESTED(Number(scopedObjectId), scopedObjectData);
+    } else if (this.scopeLevelObj) {
+      const { id: parentId } = this.scopeLevelObj;
+      Object.assign(scopedObjectData, { parentId });
+
+      ACTION_SCOPED_OBJECT_CREATE_REQUESTED(scopedObjectData);
+    }
+  }
+
+  showModal = (): void => {
+    const { scopeLevel } = this.state;
+    const { ACTION_SCOPE_LEVELS_REQUESTED } = this.props;
+
+    ACTION_SCOPE_LEVELS_REQUESTED(scopeLevel.toLowerCase());
+
+    this.setState({ isShowModal: true });
+  }
+
+  hideModal = (): void => {
+    this.setState({ isShowModal: false });
+  }
+
+  handleLevelObjChoose = (level: ScopeLevelType): void => {
+    this.scopeLevelObj = level;
+    this.setState({ isShowModal: false });
+  }
+
+  blurParentInput = (): void => {
+    this.parentIdRef.blur();
+  }
+
+  setParentRef = (ref: HTMLElement): void => {
+    this.parentIdRef = ref;
+  }
+
+  handleParentRemove = (): void => {
+    this.scopeLevelObj = null;
+    this.forceUpdate();
+  }
+}
+
+export const withSORedux = (
+  Component: ReactElement<IScopedObjectProps>,
+  scopedObjectType: string,
+) => {
+  const mapStateToProps = ({ scopedObjects, scopeLevels }) => ({
+    scopedObjects: scopedObjects[toLowerCaseAndPlural(scopedObjectType)],
+    isScopedObjectCreating: scopedObjects.isCreating,
+    isScopedObjectUpdating: scopedObjects.isUpdating,
+    scopeLevels,
+  });
+
+  const mapDispatchToProps = dispatch => ({
+    ACTION_SCOPE_LEVELS_REQUESTED: (scopeLevel: string) => {
+      dispatch(scopeLevelsActions.ACTION_SCOPE_LEVELS_REQUESTED(scopeLevel));
+    },
+    ACTION_SCOPED_OBJECT_DETAILS_REQUESTED: (scopedObjectId: number) => {
+      dispatch(scopedObjectsActions.ACTION_SCOPED_OBJECT_DETAILS_REQUESTED(
+        scopedObjectId,
+        toLowerCaseAndPlural(scopedObjectType),
+      ));
+    },
+    ACTION_SCOPED_OBJECT_CREATE_REQUESTED: (scopedObjectData: ScopedObjectBaseType) => {
+      dispatch(scopedObjectsActions.ACTION_SCOPED_OBJECT_CREATE_REQUESTED(
+        toLowerCaseAndPlural(scopedObjectType),
+        scopedObjectData,
+      ));
+    },
+    ACTION_SCOPED_OBJECT_UPDATE_REQUESTED: (
+      scopedObjectId: number,
+      scopedObjectData: ScopedObjectBaseType,
+    ) => {
+      dispatch(scopedObjectsActions.ACTION_SCOPED_OBJECT_UPDATE_REQUESTED(
+        scopedObjectId,
+        toLowerCaseAndPlural(scopedObjectType),
+        scopedObjectData,
+      ));
+    },
+  });
+
+  return connect(
+    mapStateToProps,
+    mapDispatchToProps,
+  )(
+    withStyles(styles)(
+      withRouter(Component),
+    ),
+  );
+};
+
+export default ScopedObjectService;
Index: src/app/SOEditor/Constants/styles.js
===================================================================
--- src/app/SOEditor/Constants/styles.js	(date 1563869518000)
+++ src/app/SOEditor/styles.js	(date 1563458631000)
@@ -1,6 +1,6 @@
 import styled from 'styled-components';
 
-import { DARK_BLUE } from '../../../shared/colors';
+import { DARK_BLUE } from '../../shared/colors';
 
 export const FieldLabel = styled.label`
   position: relative;
Index: src/app/SOEditor/types.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/SOEditor/types.js	(date 1563869518000)
+++ src/app/SOEditor/types.js	(date 1563458631000)
@@ -1,5 +1,40 @@
 // @flow
+import type {
+  ScopedObject as ScopedObjectType,
+  ScopedObjectBase as ScopedObjectBaseType,
+} from '../reducers/scopedObjects/types';
+import type {
+  ScopeLevels as ScopeLevelsType,
+} from '../reducers/scopeLevels/types';
+
 export type ISOEditorProps = {
   ACTION_SCOPE_LEVELS_CLEAR: () => void,
   ACTION_SCOPED_OBJECTS_CLEAR: () => void,
 };
+
+export type IScopedObjectProps = {
+  classes: {
+    [props: string]: any,
+  },
+  match: any,
+  history: any,
+  scopedObjects: Array<ScopedObjectType>,
+  scopeLevels: ScopeLevelsType,
+  isScopedObjectCreating: boolean,
+  isScopedObjectUpdating: boolean,
+  ACTION_SCOPE_LEVELS_REQUESTED: Function,
+  ACTION_SCOPED_OBJECT_CREATE_REQUESTED: Function,
+  ACTION_SCOPED_OBJECT_DETAILS_REQUESTED: Function,
+  ACTION_SCOPED_OBJECT_UPDATE_REQUESTED: Function,
+};
+
+export type Icons = {
+  iconEven: any,
+  iconOdd: any,
+};
+
+export type IScopedObjectState = {
+  ...ScopedObjectBaseType,
+  isShowModal: boolean,
+  isFieldsDisabled: boolean,
+};
Index: src/app/SOEditor/utils.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/SOEditor/utils.js	(date 1563869518000)
+++ src/app/SOEditor/utils.js	(date 1563870438000)
@@ -1,5 +1,48 @@
-export const toLowerCaseAndPlural = str => `${str.toLowerCase()}s`;
+import {
+  Spa as MapsIcon,
+  SpaOutlined as MapsOutlinedIcon,
+  OfflineBolt as ServersIcon,
+  OfflineBoltOutlined as ServersOutlinedIcon,
+  Ballot as CoursesIcon,
+  BallotOutlined as CoursesOutlinedIcon,
+  Toys as GlobalsIcon,
+  ToysOutlined as GlobalsOutlinedIcon,
+  FilterVintage as DefaultIcon,
+  FilterVintageOutlined as DefaultOutlinedIcon,
+} from '@material-ui/icons';
+
+import { SCOPE_LEVELS } from '../config';
 
-export default {
-  toLowerCaseAndPlural,
+export const getIconsByScopeLevel = (level) => {
+  switch (level) {
+    case SCOPE_LEVELS[0]:
+      return {
+        iconEven: MapsIcon,
+        iconOdd: MapsOutlinedIcon,
+      };
+    case SCOPE_LEVELS[1]:
+      return {
+        iconEven: ServersIcon,
+        iconOdd: ServersOutlinedIcon,
+      };
+    case SCOPE_LEVELS[2]:
+      return {
+        iconEven: CoursesIcon,
+        iconOdd: CoursesOutlinedIcon,
+      };
+    case SCOPE_LEVELS[3]:
+      return {
+        iconEven: GlobalsIcon,
+        iconOdd: GlobalsOutlinedIcon,
+      };
+    default:
+      return {
+        iconEven: DefaultIcon,
+        iconOdd: DefaultOutlinedIcon,
+      };
+  }
 };
+
+export const toLowerCaseAndPlural = str => `${str}s`.toLowerCase();
+
+export const toUpperCaseAndPlural = str => `${str}s`.toUpperCase();
Index: src/app/config.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/config.js	(date 1563869518000)
+++ src/app/config.js	(date 1563870438000)
@@ -4,5 +4,4 @@
   CONSTANT: 'Constant',
   COUNTER: 'Counter',
   QUESTION: 'Question',
-  FILE: 'File',
 };
Index: src/app/reducers/scopedObjects/types.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/reducers/scopedObjects/types.js	(date 1563869518000)
+++ src/app/reducers/scopedObjects/types.js	(date 1563870438000)
@@ -2,9 +2,21 @@
 export type ScopedObjectBase = {
   name: string,
   description: string,
-  value: string,
   scopeLevel: string,
   parentId: number | null,
+  value?: string,
+  visible?: number,
+  status?: number,
+  startValue?: string,
+  questionType?: number,
+  stem?: string,
+  width?: number,
+  height?: number,
+  feedback?: string,
+  placeholder?: string,
+  layoutType?: number,
+  isShowAnswer?: boolean,
+  isShowSubmit?: boolean,
 };
 
 export type ScopedObjectDetails = {
Index: src/app/Modals/LinkEditor/index.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/Modals/LinkEditor/index.jsx	(date 1563458631000)
+++ src/app/Modals/LinkEditor/index.jsx	(date 1563870438000)
@@ -4,8 +4,8 @@
 import { DragSource } from 'react-dnd';
 import { Button } from '@material-ui/core';
 
-import Slider from './Slider';
 import ChangeDirection from './ChangeDirection';
+import Slider from '../../../shared/components/Slider';
 import Switch from '../../../shared/components/Switch';
 import ColorPicker from '../../../shared/components/ColorPicker';
 import OutlinedInput from '../../../shared/components/OutlinedInput';
Index: src/app/SOEditor/Questions/MultiChoiceLayout/index.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/SOEditor/Questions/MultiChoiceLayout/index.jsx	(date 1563870438000)
+++ src/app/SOEditor/Questions/MultiChoiceLayout/index.jsx	(date 1563870438000)
@@ -0,0 +1,76 @@
+// @flow
+import React from 'react';
+import { withStyles } from '@material-ui/core/styles';
+import { TextField } from '@material-ui/core';
+
+import Switch from '../../../../shared/components/Switch';
+import OutlinedSelect from '../../../../shared/components/OutlinedSelect';
+
+import { LAYOUT_TYPES } from '../config';
+import { EDITORS_FIELDS } from '../../config';
+
+import type { IMultiChoiceLayoutProps } from './types';
+
+import styles, { SwitchWrapper } from './styles';
+import { FieldLabel } from '../../styles';
+
+const MultiChoiceLayout = ({
+  classes,
+  layoutType,
+  feedback,
+  isShowAnswer,
+  isShowSubmit,
+  isFieldsDisabled,
+  onSwitchChange,
+  onInputChange,
+  onSelectChange,
+}: IMultiChoiceLayoutProps) => (
+  <>
+    <FieldLabel>
+      {EDITORS_FIELDS.LAYOUT_TYPE}
+    </FieldLabel>
+    <OutlinedSelect
+      name="layoutType"
+      value={LAYOUT_TYPES[layoutType]}
+      values={LAYOUT_TYPES}
+      onChange={onSelectChange}
+      disabled={isFieldsDisabled}
+    />
+    <FieldLabel>
+      {EDITORS_FIELDS.FEEDBACK}
+      <TextField
+        multiline
+        rows="3"
+        name="feedback"
+        placeholder={EDITORS_FIELDS.FEEDBACK}
+        className={classes.textField}
+        margin="normal"
+        variant="outlined"
+        value={feedback}
+        onChange={onInputChange}
+        disabled={isFieldsDisabled}
+        fullWidth
+      />
+    </FieldLabel>
+    <SwitchWrapper>
+      <Switch
+        name="isShowAnswer"
+        label={EDITORS_FIELDS.SHOW_ANSWER}
+        labelPlacement="start"
+        checked={isShowAnswer}
+        onChange={onSwitchChange}
+        disabled={isFieldsDisabled}
+      />
+      <Switch
+        name="isShowSubmit"
+        label={EDITORS_FIELDS.SHOW_SUBMIT}
+        labelPlacement="start"
+        checked={isShowSubmit}
+        onChange={onSwitchChange}
+        disabled={isFieldsDisabled}
+      />
+    </SwitchWrapper>
+  </>
+);
+
+export default withStyles(styles)(MultiChoiceLayout);
Index: src/app/SOEditor/Questions/MultiChoiceLayout/styles.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/SOEditor/Questions/MultiChoiceLayout/styles.js	(date 1563870438000)
+++ src/app/SOEditor/Questions/MultiChoiceLayout/styles.js	(date 1563870438000)
@@ -0,0 +1,14 @@
+import styled from 'styled-components';
+
+export const SwitchWrapper = styled.article`
+  display: flex;
+  justify-content: space-between;
+`;
+
+const styles = () => ({
+  textField: {
+    marginTop: '0.5rem',
+  },
+});
+
+export default styles;
Index: src/app/SOEditor/Questions/MultiChoiceLayout/types.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/SOEditor/Questions/MultiChoiceLayout/types.js	(date 1563870438000)
+++ src/app/SOEditor/Questions/MultiChoiceLayout/types.js	(date 1563870438000)
@@ -0,0 +1,14 @@
+// @flow
+export type IMultiChoiceLayoutProps = {
+  classes: {
+    [props: string]: any,
+  },
+  layoutType: number,
+  feedback: string,
+  isShowAnswer: boolean,
+  isShowSubmit: boolean,
+  isFieldsDisabled: boolean,
+  onSwitchChange: Function,
+  onInputChange: Function,
+  onSelectChange: Function,
+};
Index: src/app/SOEditor/Questions/MultiLineLayout/index.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/SOEditor/Questions/MultiLineLayout/index.jsx	(date 1563870438000)
+++ src/app/SOEditor/Questions/MultiLineLayout/index.jsx	(date 1563870438000)
@@ -0,0 +1,56 @@
+// @flow
+import React from 'react';
+
+import Slider from '../../../../shared/components/Slider';
+import OutlinedInput from '../../../../shared/components/OutlinedInput';
+
+import { EDITORS_FIELDS } from '../../config';
+import { DEFAULT_WIDTH, DEFAULT_HEIGHT } from '../config';
+
+import type { IMultiLineLayoutProps } from './types';
+
+import { FieldLabel } from '../../styles';
+
+const MultiLineLayout = ({
+  placeholder, width, height, isFieldsDisabled, onInputChange, onSliderChange,
+}: IMultiLineLayoutProps) => (
+  <>
+    <FieldLabel>
+      {EDITORS_FIELDS.PLACEHOLDER}
+      <OutlinedInput
+        name="placeholder"
+        placeholder={EDITORS_FIELDS.PLACEHOLDER}
+        value={placeholder}
+        onChange={onInputChange}
+        disabled={isFieldsDisabled}
+        fullWidth
+      />
+    </FieldLabel>
+    <FieldLabel>
+      {EDITORS_FIELDS.WIDTH}
+      <Slider
+        name="width"
+        value={width}
+        min={DEFAULT_WIDTH.MIN}
+        max={DEFAULT_WIDTH.MAX}
+        step={DEFAULT_WIDTH.STEP}
+        onChange={onSliderChange}
+        disabled={isFieldsDisabled}
+      />
+    </FieldLabel>
+    <FieldLabel>
+      {EDITORS_FIELDS.HEIGHT}
+      <Slider
+        name="height"
+        value={height}
+        min={DEFAULT_HEIGHT.MIN}
+        max={DEFAULT_HEIGHT.MAX}
+        step={DEFAULT_HEIGHT.STEP}
+        onChange={onSliderChange}
+        disabled={isFieldsDisabled}
+      />
+    </FieldLabel>
+  </>
+);
+
+export default MultiLineLayout;
Index: src/app/SOEditor/Questions/MultiLineLayout/types.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/SOEditor/Questions/MultiLineLayout/types.js	(date 1563870438000)
+++ src/app/SOEditor/Questions/MultiLineLayout/types.js	(date 1563870438000)
@@ -0,0 +1,9 @@
+// @flow
+export type IMultiLineLayoutProps = {
+  placeholder: string,
+  width: number,
+  height: number,
+  isFieldsDisabled: boolean,
+  onInputChange: Function,
+  onSliderChange: Function,
+};
Index: src/app/SOEditor/Questions/config.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/SOEditor/Questions/config.js	(date 1563870438000)
+++ src/app/SOEditor/Questions/config.js	(date 1563870438000)
@@ -0,0 +1,22 @@
+export const LAYOUT_TYPES = [
+  'Vertical response', 'Horizontal response',
+];
+
+export const QUESTION_TYPES = {
+  2: 'Multi-line',
+  3: 'Multiple Choice',
+  7: 'Script Concordance Testing',
+  14: 'Pick Choice',
+};
+
+export const DEFAULT_WIDTH = {
+  MIN: 10,
+  MAX: 60,
+  STEP: 10,
+};
+
+export const DEFAULT_HEIGHT = {
+  MIN: 2,
+  MAX: 8,
+  STEP: 2,
+};
Index: src/app/SOEditor/Questions/index.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/SOEditor/Questions/index.jsx	(date 1563870438000)
+++ src/app/SOEditor/Questions/index.jsx	(date 1563870438000)
@@ -0,0 +1,221 @@
+// @flow
+import React from 'react';
+import { TextField, Chip } from '@material-ui/core';
+
+import ScopedObjectService, { withSORedux } from '../index.service';
+
+import MultiChoiceLayout from './MultiChoiceLayout';
+import MultiLineLayout from './MultiLineLayout';
+import OutlinedInput from '../../../shared/components/OutlinedInput';
+import OutlinedSelect from '../../../shared/components/OutlinedSelect';
+import EditorWrapper from '../../../shared/components/EditorWrapper';
+import SearchModal from '../../../shared/components/SearchModal';
+
+import type { IScopedObjectProps } from '../types';
+
+import {
+  LAYOUT_TYPES, QUESTION_TYPES, DEFAULT_WIDTH, DEFAULT_HEIGHT,
+} from './config';
+import { EDITORS_FIELDS } from '../config';
+import { SCOPE_LEVELS, SCOPED_OBJECTS } from '../../config';
+import { getKeyByValue } from './utils';
+
+import { FieldLabel } from '../styles';
+
+class Questions extends ScopedObjectService {
+  constructor(props: IScopedObjectProps) {
+    super(props, SCOPED_OBJECTS.QUESTION);
+    this.state = {
+      name: '',
+      description: '',
+      scopeLevel: SCOPE_LEVELS[0],
+      width: DEFAULT_WIDTH.MIN,
+      height: DEFAULT_HEIGHT.MIN,
+      stem: '',
+      feedback: '',
+      placeholder: '',
+      layoutType: 0,
+      questionType: Number(Object.keys(QUESTION_TYPES)[0]),
+      isShowAnswer: false,
+      isShowSubmit: false,
+      isShowModal: false,
+      isFieldsDisabled: false,
+    };
+  }
+
+  handleQuestionTypeChange = (e: Event): void => {
+    const { value, name } = (e.target: window.HTMLInputElement);
+    const key = Number(getKeyByValue(QUESTION_TYPES, value));
+    this.setState({ [name]: key });
+  }
+
+  handleSliderOrSwitchChange = (e: Event, value: number | boolean, name: string): void => {
+    this.setState({ [name]: value });
+  };
+
+  handleLayoutTypeChange = (e: Event): void => {
+    const { value, name } = (e.target: window.HTMLInputElement);
+    const index = LAYOUT_TYPES.findIndex(type => type === value);
+    this.setState({ [name]: index });
+  }
+
+  render() {
+    const {
+      name,
+      description,
+      stem,
+      width,
+      height,
+      placeholder,
+      feedback,
+      layoutType,
+      questionType,
+      scopeLevel,
+      isShowAnswer,
+      isShowSubmit,
+      isShowModal,
+      isFieldsDisabled,
+    } = this.state;
+    const { classes, scopeLevels } = this.props;
+    const { iconEven: IconEven, iconOdd: IconOdd } = this.icons;
+
+    const isMultiLineType = Number(Object.keys(QUESTION_TYPES)[0]) === questionType;
+
+    return (
+      <EditorWrapper
+        isEditMode={this.isEditMode}
+        isDisabled={isFieldsDisabled}
+        scopedObject={this.scopedObjectType}
+        onSubmit={this.handleSubmitScopedObject}
+      >
+        <FieldLabel>
+          {EDITORS_FIELDS.NAME}
+          <OutlinedInput
+            name="name"
+            placeholder={EDITORS_FIELDS.NAME}
+            value={name}
+            onChange={this.handleInputChange}
+            disabled={isFieldsDisabled}
+            fullWidth
+          />
+        </FieldLabel>
+        <FieldLabel>
+          {EDITORS_FIELDS.DESCRIPTION}
+          <TextField
+            multiline
+            rows="3"
+            name="description"
+            placeholder={EDITORS_FIELDS.DESCRIPTION}
+            className={classes.textField}
+            margin="normal"
+            variant="outlined"
+            value={description}
+            onChange={this.handleInputChange}
+            disabled={isFieldsDisabled}
+            fullWidth
+          />
+        </FieldLabel>
+        <FieldLabel>
+          {EDITORS_FIELDS.STEM}
+          <TextField
+            multiline
+            rows="3"
+            name="stem"
+            placeholder={EDITORS_FIELDS.STEM}
+            className={classes.textField}
+            margin="normal"
+            variant="outlined"
+            value={stem}
+            onChange={this.handleInputChange}
+            disabled={isFieldsDisabled}
+            fullWidth
+          />
+        </FieldLabel>
+        <FieldLabel>
+          {EDITORS_FIELDS.QUESTION_TYPES}
+        </FieldLabel>
+        <OutlinedSelect
+          name="questionType"
+          value={QUESTION_TYPES[questionType]}
+          values={Object.values(QUESTION_TYPES)}
+          onChange={this.handleQuestionTypeChange}
+          disabled={isFieldsDisabled}
+        />
+        {isMultiLineType ? (
+          <MultiLineLayout
+            placeholder={placeholder}
+            width={width}
+            height={height}
+            isFieldsDisabled={isFieldsDisabled}
+            onInputChange={this.handleInputChange}
+            onSliderChange={this.handleSliderOrSwitchChange}
+          />
+        ) : (
+          <MultiChoiceLayout
+            layoutType={layoutType}
+            feedback={feedback}
+            isShowAnswer={isShowAnswer}
+            isShowSubmit={isShowSubmit}
+            isFieldsDisabled={isFieldsDisabled}
+            onInputChange={this.handleInputChange}
+            onSwitchChange={this.handleSliderOrSwitchChange}
+            onSelectChange={this.handleLayoutTypeChange}
+          />
+        )}
+
+        {!this.isEditMode && (
+          <>
+            <FieldLabel>
+              {EDITORS_FIELDS.SCOPE_LEVEL}
+            </FieldLabel>
+            <OutlinedSelect
+              name="scopeLevel"
+              value={scopeLevel}
+              values={SCOPE_LEVELS}
+              onChange={this.handleInputChange}
+              disabled={isFieldsDisabled}
+            />
+            <FieldLabel>
+              {EDITORS_FIELDS.PARENT}
+              <OutlinedInput
+                name="parentId"
+                placeholder={this.scopeLevelObj ? '' : EDITORS_FIELDS.PARENT}
+                disabled={isFieldsDisabled}
+                onFocus={this.showModal}
+                setRef={this.setParentRef}
+                readOnly
+                fullWidth
+              />
+              {this.scopeLevelObj && (
+                <Chip
+                  className={classes.chip}
+                  label={this.scopeLevelObj.name}
+                  variant="outlined"
+                  color="primary"
+                  onDelete={this.handleParentRemove}
+                  icon={<IconEven />}
+                />
+              )}
+            </FieldLabel>
+          </>
+        )}
+
+        {isShowModal && (
+          <SearchModal
+            label="Parent record"
+            searchLabel="Search for parent record"
+            items={scopeLevels[scopeLevel.toLowerCase()]}
+            text={`Please choose appropriate parent from ${scopeLevel}:`}
+            onClose={this.hideModal}
+            onItemChoose={this.handleLevelObjChoose}
+            isItemsFetching={scopeLevels.isFetching}
+            iconEven={IconEven}
+            iconOdd={IconOdd}
+          />
+        )}
+      </EditorWrapper>
+    );
+  }
+}
+
+export default withSORedux(Questions, SCOPED_OBJECTS.QUESTION);
Index: src/app/SOEditor/Questions/utils.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/SOEditor/Questions/utils.js	(date 1563870438000)
+++ src/app/SOEditor/Questions/utils.js	(date 1563870438000)
@@ -0,0 +1,7 @@
+export const getKeyByValue = (object, value) => (
+  Object.keys(object).find(key => object[key] === value)
+);
+
+export default {
+  getKeyByValue,
+};
Index: src/helpers/applyAPIMapping.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/helpers/applyAPIMapping.js	(date 1563458631000)
+++ src/helpers/applyAPIMapping.js	(date 1563890959000)
@@ -1,3 +1,6 @@
+import { isBoolean, isNumber } from './dataTypes';
+import { QUESTION_TYPES } from '../app/SOEditor/Questions/config';
+
 export const edgeToServer = edgeData => ({
   id: edgeData.id,
   text: edgeData.label,
@@ -113,21 +116,46 @@
   isDetailsFetching: false,
 });
 
-export const scopedObjectByTypeFromServer = ({ url, ...restSO }) => ({ ...restSO });
+export const scopedObjectByTypeFromServer = ({
+  url, showAnswer, showSubmit, ...restSO
+}) => ({
+  ...restSO,
+  ...(isNumber(showAnswer) && { isShowAnswer: Number(showAnswer) }),
+  ...(isNumber(showAnswer) && { isShowSubmit: Number(showAnswer) }),
+});
+
+export const scopedObjectToServer = (SO) => {
+  if (Number(Object.keys(QUESTION_TYPES)[0]) === SO.questionType) {
+    const {
+      feedback, layoutType, isShowAnswer, isShowSubmit, ...restSO
+    } = SO;
+
+    return {
+      ...restSO,
+      ...(!SO.placeholder && { placeholder: 'Default Placeholder Value' }),
+    };
+  }
+
+  const {
+    width, height, placeholder, isShowAnswer, isShowSubmit, ...restSO
+  } = SO;
+
+  return {
+    ...restSO,
+    ...(isBoolean(isShowAnswer) && { showAnswer: Number(isShowAnswer) }),
+    ...(isBoolean(isShowSubmit) && { showSubmit: Number(isShowSubmit) }),
+  };
+};
 
 export const scopedObjectDetailsFromServer = ({
-  url, description, scopeLevel, value, prefix, suffix, startValue, outOf, ...restSODetails
+  id, name, parentId, wiki, url, ...restSODetails
 }) => ({
+  id,
+  name,
+  ...(parentId && { parentId }),
   ...restSODetails,
   details: {
-    description,
-    scopeLevel,
-    value,
-    prefix,
-    suffix,
-    startValue,
-    outOf,
+    ...restSODetails,
   },
-  isShowEyeIcon: Boolean(url),
-  isDetailsFetching: false,
+  ...(url && { isShowEyeIcon: Boolean(url) }),
 });
Index: src/helpers/dataTypes.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/helpers/dataTypes.js	(date 1563870438000)
+++ src/helpers/dataTypes.js	(date 1563870438000)
@@ -0,0 +1,3 @@
+export const isBoolean = val => typeof val === 'boolean';
+
+export const isNumber = value => !Number.isNaN(parseFloat(value));
Index: src/helpers/filterByName.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/helpers/filterByName.js	(date 1563458631000)
+++ src/helpers/filterByName.js	(date 1563870438000)
@@ -2,7 +2,7 @@
 const filterByName = (items: Array<any>, queryStr: string): Array<any> => {
   const queryStrClear = queryStr.trim().toLowerCase();
   const itemsFiltered = items.filter(({ name }) => (
-    name.toLowerCase().includes(queryStrClear)
+    (name || '').toLowerCase().includes(queryStrClear)
   ));
 
   return itemsFiltered;
Index: src/services/api/scopedObjects.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/services/api/scopedObjects.js	(date 1563458631000)
+++ src/services/api/scopedObjects.js	(date 1563870438000)
@@ -1,5 +1,6 @@
 import createInstance from '../createCustomInstance';
 import {
+  scopedObjectToServer,
   scopedObjectFromServer,
   scopedObjectByTypeFromServer,
   scopedObjectDetailsFromServer,
@@ -39,7 +40,9 @@
 
 export const createScopedObject = (scopedObjectType, scopedObjectData) => API
   .post(`/olab/${scopedObjectType}`, {
-    data: scopedObjectData,
+    data: {
+      ...scopedObjectToServer(scopedObjectData),
+    },
   })
   .then(({ data: { data: { id: scopedObjectId } } }) => scopedObjectId)
   .catch((error) => {
@@ -49,7 +52,7 @@
 export const editScopedObject = (scopedObjectId, scopedObjectType, editedScopedObjectData) => API
   .put(`/olab/${scopedObjectType}/${scopedObjectId}`, {
     data: {
-      ...editedScopedObjectData,
+      ...scopedObjectToServer(editedScopedObjectData),
     },
   })
   .catch((error) => {
Index: src/shared/components/EditorWrapper/index.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/shared/components/EditorWrapper/index.jsx	(date 1563458631000)
+++ src/shared/components/EditorWrapper/index.jsx	(date 1563870438000)
@@ -12,7 +12,7 @@
 import styles, { HeadingWrapper } from './styles';
 
 const EditorWrapper = ({
-  classes, children, scopedObject, onSubmit, isEditMode, history,
+  classes, children, history, scopedObject, onSubmit, isEditMode, isDisabled,
 }: IEditorWrapperProps) => (
   <Grid container component="main" className={classes.root}>
     <CssBaseline />
@@ -39,6 +39,7 @@
           color="primary"
           className={classes.submit}
           onClick={onSubmit}
+          disabled={isDisabled}
         >
           {isEditMode ? 'Update' : 'Create'}
         </Button>
Index: src/shared/components/EditorWrapper/types.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/shared/components/EditorWrapper/types.js	(date 1563458631000)
+++ src/shared/components/EditorWrapper/types.js	(date 1563870438000)
@@ -8,4 +8,5 @@
   scopedObject: string,
   onSubmit: Function,
   isEditMode: boolean,
+  isDisabled: boolean,
 };
Index: src/app/Modals/LinkEditor/Slider/index.jsx
===================================================================
--- src/app/Modals/LinkEditor/Slider/index.jsx	(date 1563458631000)
+++ src/shared/components/Slider/index.jsx	(date 1563870438000)
@@ -1,29 +1,28 @@
 // @flow
 import React from 'react';
 import { withStyles } from '@material-ui/core/styles';
-import { Slider as MaterialSlider } from '@material-ui/lab';
 import { InputLabel } from '@material-ui/core';
+import { Slider as MaterialSlider } from '@material-ui/lab';
 
 import type { ISliderProps } from './types';
 
-import styles, {
-  SliderWrapper,
-  SliderValue,
-} from './styles';
+import styles, { SliderWrapper, SliderValue } from './styles';
 
 const Slider = ({
-  label, value, classes, min, max, step, onChange,
+  label, name, value, classes, min, max, step, disabled = false, onChange,
 }: ISliderProps) => (
   <div>
-    <InputLabel>{label}</InputLabel>
+    {label && <InputLabel>{label}</InputLabel>}
     <SliderWrapper>
       <MaterialSlider
+        name={name || ''}
         classes={{ container: classes.slider }}
         value={value}
-        onChange={onChange}
+        onChange={(e: Event, val: number) => onChange(e, val, name)}
         min={min}
         max={max}
         step={step}
+        disabled={disabled}
       />
       <SliderValue>{value}</SliderValue>
     </SliderWrapper>
Index: src/app/Modals/LinkEditor/Slider/styles.js
===================================================================
--- src/app/Modals/LinkEditor/Slider/styles.js	(date 1563458631000)
+++ src/shared/components/Slider/styles.js	(date 1563870438000)
@@ -1,0 +1,0 @@
Index: src/shared/components/Slider/types.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/shared/components/Slider/types.js	(date 1563870438000)
+++ src/shared/components/Slider/types.js	(date 1563870438000)
@@ -0,0 +1,14 @@
+// @flow
+export type ISliderProps = {
+  classes: {
+    [prop: string]: any,
+  },
+  label: string,
+  name: string,
+  value: number,
+  min: number,
+  max: number,
+  step: number,
+  disabled: boolean,
+  onChange: Function,
+};
Index: src/shared/components/Switch/index.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/shared/components/Switch/index.jsx	(date 1563458631000)
+++ src/shared/components/Switch/index.jsx	(date 1563870438000)
@@ -8,7 +8,7 @@
 import styles from './styles';
 
 const Switch = ({
-  name, label, labelPlacement, classes, checked, onChange,
+  name, label, labelPlacement, classes, checked, disabled = false, onChange,
 }: ISwitchProps) => (
   <FormControlLabel
     label={(
@@ -28,6 +28,7 @@
           checked: classes.iOSChecked,
         }}
         checked={checked}
+        disabled={disabled}
         onChange={(e: Event, checkedVal: boolean): Function => onChange(e, checkedVal, name)}
         disableRipple
       />
Index: src/shared/components/Switch/types.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/shared/components/Switch/types.js	(date 1563458631000)
+++ src/shared/components/Switch/types.js	(date 1563870438000)
@@ -7,5 +7,6 @@
   label: string,
   labelPlacement: string,
   checked: boolean,
+  disabled: boolean,
   onChange: Function,
 };
Index: src/app/Constructor/Graph/Edge/sagas.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/Constructor/Graph/Edge/sagas.js	(date 1563870438000)
+++ src/app/Constructor/Graph/Edge/sagas.js	(date 1563790573000)
@@ -2,21 +2,14 @@
   call, put, select, takeEvery,
 } from 'redux-saga/effects';
 
-import {
-  createEdge, deleteEdge, updateEdge,
-} from '../../../../services/api/edge';
+import { createEdge, deleteEdge, updateEdge } from '../../../../services/api/edge';
+
+import { CREATE_EDGE, DELETE_EDGE, UPDATE_EDGE } from '../../../reducers/map/types';
 
 import { ACTION_EXCHANGE_EDGE_ID } from '../../../reducers/map/action';
-import {
-  ACTION_NOTIFICATION_ERROR,
-  ACTION_NOTIFICATION_SUCCESS,
-} from '../../../reducers/notifications/action';
+import { ACTION_NOTIFICATION_ERROR, ACTION_NOTIFICATION_SUCCESS } from '../../../reducers/notifications/action';
 
-import {
-  CREATE_EDGE,
-  DELETE_EDGE,
-  UPDATE_EDGE,
-} from '../../../reducers/map/types';
+import { MESSAGES } from '../../../reducers/notifications/config';
 
 function* createEdgeSaga({ edge, edge: { id: prevEdgeId } }) {
   try {
@@ -50,7 +43,7 @@
     const mapId = yield select(({ map }) => map.id);
 
     yield call(updateEdge, mapId, edge);
-    yield put(ACTION_NOTIFICATION_SUCCESS('Changes was saved!'));
+    yield put(ACTION_NOTIFICATION_SUCCESS(MESSAGES.ON_UPDATE.EDGE));
   } catch (error) {
     const { response, message } = error;
     const errorMessage = response ? response.statusText : message;
Index: src/app/Constructor/Graph/Node/sagas.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/Constructor/Graph/Node/sagas.js	(date 1563870438000)
+++ src/app/Constructor/Graph/Node/sagas.js	(date 1563790573000)
@@ -3,25 +3,17 @@
 } from 'redux-saga/effects';
 
 import {
-  createNode,
-  deleteNode,
-  updateNode,
+  createNode, deleteNode, updateNode,
 } from '../../../../services/api/node';
 
 import {
-  CREATE_NODE,
-  UPDATE_NODE,
-  DELETE_NODE,
-  CREATE_NODE_WITH_EDGE,
+  CREATE_NODE, UPDATE_NODE, DELETE_NODE, CREATE_NODE_WITH_EDGE,
 } from '../../../reducers/map/types';
-import {
-  ACTION_EXCHANGE_NODE_ID,
-  ACTION_EXCHANGE_EDGE_ID,
-} from '../../../reducers/map/action';
-import {
-  ACTION_NOTIFICATION_ERROR,
-  ACTION_NOTIFICATION_SUCCESS,
-} from '../../../reducers/notifications/action';
+
+import { ACTION_EXCHANGE_NODE_ID, ACTION_EXCHANGE_EDGE_ID } from '../../../reducers/map/action';
+import { ACTION_NOTIFICATION_ERROR, ACTION_NOTIFICATION_SUCCESS } from '../../../reducers/notifications/action';
+
+import { MESSAGES } from '../../../reducers/notifications/config';
 
 function* createNodeSaga({ node: { id: oldNodeId, x, y } }) {
   try {
@@ -62,7 +54,7 @@
 
     yield call(updateNode, mapId, node);
     if (isShowNotification) {
-      yield put(ACTION_NOTIFICATION_SUCCESS('Changes was saved!'));
+      yield put(ACTION_NOTIFICATION_SUCCESS(MESSAGES.ON_UPDATE.NODE));
     }
   } catch (error) {
     const { response, message } = error;
Index: src/app/reducers/map/sagas.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/reducers/map/sagas.js	(date 1563870438000)
+++ src/app/reducers/map/sagas.js	(date 1563790573000)
@@ -4,9 +4,7 @@
 import { getMap, createMap, extendMap } from '../../../services/api/map';
 
 import {
-  GET_MAP_REQUESTED,
-  CREATE_MAP_REQUESTED,
-  EXTEND_MAP_REQUESTED,
+  GET_MAP_REQUESTED, CREATE_MAP_REQUESTED, EXTEND_MAP_REQUESTED,
 } from './types';
 
 import { ACTION_NOTIFICATION_ERROR } from '../notifications/action';
Index: src/app/reducers/notifications/config.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/reducers/notifications/config.js	(date 1563870438000)
+++ src/app/reducers/notifications/config.js	(date 1563790573000)
@@ -4,7 +4,11 @@
 };
 
 export const MESSAGES = {
-  ON_UPDATE: 'Changes has been saved',
+  ON_UPDATE: {
+    SCOPED_OBJECT: 'Object has been updated',
+    NODE: 'Node has been updated',
+    EDGE: 'Link has been updated',
+  },
   ON_CREATE: {
     TEMPLATE: 'Template has been created',
     SCOPED_OBJECT: 'Object has been created',
Index: src/app/reducers/scopedObjects/sagas.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/reducers/scopedObjects/sagas.js	(date 1563870438000)
+++ src/app/reducers/scopedObjects/sagas.js	(date 1563790573000)
@@ -120,7 +120,7 @@
       scopedObjectData,
     );
 
-    yield put(ACTION_NOTIFICATION_SUCCESS(MESSAGES.ON_UPDATE));
+    yield put(ACTION_NOTIFICATION_SUCCESS(MESSAGES.ON_UPDATE.SCOPED_OBJECT));
   } catch (error) {
     const { response, message } = error;
     const errorMessage = response ? response.statusText : message;
Index: src/app/Modals/SOPicker/utils.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/Modals/SOPicker/utils.js	(date 1563790573000)
+++ src/app/Modals/SOPicker/utils.js	(date 1563890959000)
@@ -1,9 +1,14 @@
 const getFilterCallback = (level, queryStr) => ({ name, scopeLevel }) => {
   const isLevelMatches = level === 'All' || scopeLevel === level;
+
+  if (!isLevelMatches) {
+    return false;
+  }
+
   const nameLowerCased = name.toLowerCase();
   const queryStrLowerCased = queryStr.trim().toLowerCase();
 
-  return isLevelMatches && nameLowerCased.includes(queryStrLowerCased);
+  return nameLowerCased.includes(queryStrLowerCased);
 };
 
 export default getFilterCallback;
Index: src/app/reducers/scopedObjects/action.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/reducers/scopedObjects/action.js	(date 1563790573000)
+++ src/app/reducers/scopedObjects/action.js	(date 1563890959000)
@@ -45,9 +45,10 @@
   const { scopedObjects } = store.getState();
   const scopedObjectsList = scopedObjects[scopedObjectType];
   const scopedObjectIndex = scopedObjectsList.findIndex(({ id }) => id === scopedObjectId);
-  const clonedScopedObject = { ...scopedObjectsList[scopedObjectIndex] };
-
-  clonedScopedObject.isDetailsFetching = true;
+  const clonedScopedObject = {
+    ...scopedObjectsList[scopedObjectIndex],
+    isDetailsFetching: true,
+  };
 
   return {
     type: SCOPED_OBJECT_DETAILS_REQUESTED,
@@ -65,9 +66,10 @@
   const { scopedObjects } = store.getState();
   const scopedObjectsList = scopedObjects[scopedObjectType];
   const scopedObjectIndex = scopedObjectsList.findIndex(({ id }) => id === scopedObjectId);
-  const clonedScopedObject = { ...scopedObjectsList[scopedObjectIndex] };
-
-  clonedScopedObject.isDetailsFetching = false;
+  const clonedScopedObject = {
+    ...scopedObjectsList[scopedObjectIndex],
+    isDetailsFetching: false,
+  };
 
   return {
     type: SCOPED_OBJECT_DETAILS_FULFILLED,
@@ -87,7 +89,8 @@
   const scopedObjectIndex = scopedObjectsList.findIndex(({ id }) => id === scopedObjectId);
   const clonedScopedObject = {
     ...scopedObjectsList[scopedObjectIndex],
-    scopedObjectDetails,
+    ...scopedObjectDetails,
+    isDetailsFetching: false,
   };
 
   return {
Index: src/app/reducers/scopedObjects/reducer.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/reducers/scopedObjects/reducer.js	(date 1563790573000)
+++ src/app/reducers/scopedObjects/reducer.js	(date 1563890959000)
@@ -65,8 +65,8 @@
         ...state,
         [scopedObjectType]: [
           ...state[scopedObjectType].slice(0, scopedObjectIndex),
-          ...state[scopedObjectType].slice(scopedObjectIndex + 1),
           scopedObject,
+          ...state[scopedObjectType].slice(scopedObjectIndex + 1),
         ],
         isFetching: false,
       };
Index: src/app/Home/index.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/Home/index.jsx	(date 1563905497000)
+++ src/app/Home/index.jsx	(date 1563906331000)
@@ -44,7 +44,7 @@
     }
 
     if (isMapRetrieved) {
-      history.push(`/constructor/${mapId}`);
+      history.push(`/${mapId}`);
     }
   }
 
Index: src/app/index.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/index.jsx	(date 1563905497000)
+++ src/app/index.jsx	(date 1563906331000)
@@ -41,7 +41,7 @@
       <Switch>
         <Route exact path="/login" component={Login} />
         <ProtectedRoute exact isAuth={isAuth} path="/" component={Home} />
-        <ProtectedRoute exact isAuth={isAuth} path="/constructor/:mapId" component={Constructor} />
+        <ProtectedRoute exact isAuth={isAuth} path="/:mapId" component={Constructor} />
         <ProtectedRoute isAuth={isAuth} path="/scopedObject/:scopedObjectType" component={SOEditor} />
         <ProtectedRoute exact isAuth={isAuth} path="*" component={PageNotFound} />
       </Switch>
Index: src/app/SOEditor/Constants/types.js
===================================================================
--- src/app/SOEditor/Constants/types.js	(date 1563869518000)
+++ src/app/SOEditor/Constants/types.js	(date 1563869518000)
@@ -1,35 +0,0 @@
-// @flow
-import type {
-  ScopedObject as ScopedObjectType,
-  ScopedObjectBase as ScopedObjectBaseType,
-} from '../../reducers/scopedObjects/types';
-import type {
-  ScopeLevels as ScopeLevelsType,
-} from '../../reducers/scopeLevels/types';
-
-export type IConstantsProps = {
-  classes: {
-    [props: string]: any,
-  },
-  match: any,
-  history: any,
-  constants: Array<ScopedObjectType>,
-  scopeLevels: ScopeLevelsType,
-  isConstantCreating: boolean,
-  isConstantUpdating: boolean,
-  ACTION_SCOPE_LEVELS_REQUESTED: Function,
-  ACTION_CONSTANT_CREATE_REQUESTED: Function,
-  ACTION_CONSTANT_DETAILS_REQUESTED: Function,
-  ACTION_CONSTANT_UPDATE_REQUESTED: Function,
-};
-
-export type Icons = {
-  iconEven: any,
-  iconOdd: any,
-};
-
-export type IConstantsState = {
-  ...ScopedObjectBaseType,
-  isShowModal: boolean,
-  isFieldsDisabled: boolean,
-};
Index: src/app/SOEditor/Constants/utils.js
===================================================================
--- src/app/SOEditor/Constants/utils.js	(date 1563869518000)
+++ src/app/SOEditor/Constants/utils.js	(date 1563869518000)
@@ -1,48 +0,0 @@
-import {
-  Spa as MapsIcon,
-  SpaOutlined as MapsOutlinedIcon,
-  OfflineBolt as ServersIcon,
-  OfflineBoltOutlined as ServersOutlinedIcon,
-  Ballot as CoursesIcon,
-  BallotOutlined as CoursesOutlinedIcon,
-  Toys as GlobalsIcon,
-  ToysOutlined as GlobalsOutlinedIcon,
-  FilterVintage as DefaultIcon,
-  FilterVintageOutlined as DefaultOutlinedIcon,
-} from '@material-ui/icons';
-
-import { SCOPE_LEVELS } from '../../config';
-
-export const getIconsByScopeLevel = (level) => {
-  switch (level) {
-    case SCOPE_LEVELS[0]:
-      return {
-        iconEven: MapsIcon,
-        iconOdd: MapsOutlinedIcon,
-      };
-    case SCOPE_LEVELS[1]:
-      return {
-        iconEven: ServersIcon,
-        iconOdd: ServersOutlinedIcon,
-      };
-    case SCOPE_LEVELS[2]:
-      return {
-        iconEven: CoursesIcon,
-        iconOdd: CoursesOutlinedIcon,
-      };
-    case SCOPE_LEVELS[3]:
-      return {
-        iconEven: GlobalsIcon,
-        iconOdd: GlobalsOutlinedIcon,
-      };
-    default:
-      return {
-        iconEven: DefaultIcon,
-        iconOdd: DefaultOutlinedIcon,
-      };
-  }
-};
-
-export default {
-  getIconsByScopeLevel,
-};
Index: src/app/Modals/LinkEditor/Slider/types.js
===================================================================
--- src/app/Modals/LinkEditor/Slider/types.js	(date 1563458631000)
+++ src/app/Modals/LinkEditor/Slider/types.js	(date 1563458631000)
@@ -1,12 +0,0 @@
-// @flow
-export type ISliderProps = {
-  label: string;
-  value: number;
-  min: number;
-  max: number;
-  step: number;
-  onChange: Function;
-  classes: {
-    [prop: string]: any;
-  };
-};
